name: CI Pipeline

on:
  pull_request:
    branches: [master, develop, feature/add-template]
  push:
    branches: [master, develop, feature/add-template]

env:
  PROJECT_NAME: PROJECT_NAME.sln
  THRESHOLD: 98

jobs:
  lint:
    name: Format Analysis
    runs-on: ubuntu-latest
    steps: 
      - uses: actions/checkout@v2
      - name: Setup .NET Core Checkout Master
        uses: actions/checkout@master
        with:
          dotnet-version: 5.0.101

      - name: Check whether files are formatted
        run: |
          dotnet tool install -g dotnet-format
          dotnet tool restore
          dotnet format --check
    
  sonar:
    needs: lint
    name: SonarQube Analysis
    runs-on: windows-latest
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"guilhermelionzo_CQRS-Boilerplate" /o:"guilhermelionzo" /d:sonar.login="${{env.SONAR_TOKEN}}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{env.SONAR_TOKEN}}"

  test:
    name: Tests
    needs: sonar
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET Core Checkout Master
        uses: actions/checkout@master
        with:
          dotnet-version: 5.0.1001

      - name: Unit Tests
        run: |
          cd PROJECT_NAME.Domain.Tests
          export THRESHOLD=98
          export DOMAIN_FOLDER=PROJECT_NAME.Domain
          export API_FOLDER=PROJECT_NAME.Api
          dotnet test /p:CollectCoverage=true \
                      /p:Threshold=${THRESHOLD}
